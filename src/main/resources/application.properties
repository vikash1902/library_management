server.servlet.context-path=/lm

# db configuration
spring.datasource.url=jdbc:postgresql://10.199.62.78:5432/pyramid_db
spring.datasource.username=pyramid
spring.datasource.password=pyramid

## hibernate and jpa configuration
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.format_sql=true
server.error.whitelabel.enabled=false
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.show_sql=false



#server.port=8080

## Google OAuth Client Registration

spring.security.oauth2.client.registration.google.client-id=44421160554-okmefnn3gqcqqrff479elp4jsu8kio09.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
#spring.security.oauth2.client.registration.google.client-id=your_client_id
#spring.security.oauth2.client.registration.google.client-secret=your_client_secrate
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

# Google OAuth Provider Details
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v1/certs

# Resource Server JWT Validation
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://accounts.google.com


## logging configuration
logging.level.org.springframework.security=INFO
logging.level.org.springframework.web: INFO
logging.level.org.springframework: INFO
logging.level.org.flywaydb=DEBUG


#Documentation
springdoc.swagger-ui.path=/docs/swagger-ui.html
springdoc.api-docs.path=/docs/api-docs

#openApi.server.url=http://localhost:8080/lm
openApi.server.url=http://10.199.62.78:8085/lm
openApi.server.desc=Development
openApi.title=Library management API
openApi.version=3.0
openApi.contact.name=Vikas
openApi.contact.email=test@test.com
openApi.contact.url=https://www.google.com
openApi.license.name=Apache 2.0
openApi.license.url=https://www.apache.org/licenses/LICENSE-2.0
openApi.termsOfService=terms of service
openApi.desc=This is APIs for library management.

## flyway configuration
spring.flyway.enabled=true
spring.flyway.url=jdbc:postgresql://10.199.62.78:5432/pyramid_db
spring.flyway.user=pyramid
spring.flyway.password=pyramid
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=1
spring.flyway.locations=classpath:db/migration
spring.flyway.ignore.unsupported.database=true
spring.flyway.validate-on-migrate=false
spring.flyway.clean-disabled=false